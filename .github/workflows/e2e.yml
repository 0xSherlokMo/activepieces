name: E2E Tests

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main
      - gh-actions-test-branch
  workflow_dispatch:

permissions:
  actions: write
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  check-label:
    runs-on: ubuntu-latest
    outputs:
      should-run-e2e: ${{ steps.check-if-pr-has-label.outputs.run-e2e }}
    steps:
      - name: Check if PR exists with ready-for-e2e label for this SHA
        id: check-if-pr-has-label
        uses: actions/github-script@v7
        with:
          script: |
            // Always run on manual workflow dispatch
            if (context.eventName === 'workflow_dispatch') {
              core.setOutput('run-e2e', true);
              return;
            }
            
            let labels = [];
            if (context.payload.pull_request) {
              labels = context.payload.pull_request.labels;
            } else {
              try {
                const sha = context.sha;
                const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  commit_sha: sha
                });
                if (prs.length === 0) {
                  core.setOutput('run-e2e', false);
                  return;
                }
                const pr = prs[0];
                labels = pr.labels;
              } catch (e) {
                core.setOutput('run-e2e', false);
                return;
              }
            }
            const labelFound = labels.map(l => l.name).includes('ready-for-e2e');
            core.setOutput('run-e2e', labelFound);

  test-e2e-cloud:
    needs: check-label
    if: needs.check-label.outputs.should-run-e2e == 'true'
    uses: ./.github/workflows/tests-e2e-cloud.yml

  test-e2e-ee:
    needs: check-label
    if: needs.check-label.outputs.should-run-e2e == 'true'
    uses: ./.github/workflows/tests-e2e-ee.yml

  test-e2e-ce:
    needs: check-label
    if: needs.check-label.outputs.should-run-e2e == 'true'
    uses: ./.github/workflows/tests-e2e-ce.yml

  notify-on-completion:
    needs: [check-label, test-e2e-cloud, test-e2e-ee, test-e2e-ce]
    if: always() && needs.check-label.outputs.should-run-e2e == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: "*"
          merge-multiple: false

      - name: Send Discord notification on E2E failure
        if: needs.test-e2e-cloud.result == 'failure' || needs.test-e2e-ee.result == 'failure' || needs.test-e2e-ce.result == 'failure'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_ON_CALL_WEBHOOK }}
        run: |
          # Determine which tests failed
          failed_tests=""
          if [[ "${{ needs.test-e2e-cloud.result }}" == "failure" ]]; then
            failed_tests="${failed_tests}‚Ä¢ Cloud Edition\n"
          fi
          if [[ "${{ needs.test-e2e-ee.result }}" == "failure" ]]; then
            failed_tests="${failed_tests}‚Ä¢ Enterprise Edition\n"
          fi
          if [[ "${{ needs.test-e2e-ce.result }}" == "failure" ]]; then
            failed_tests="${failed_tests}‚Ä¢ Community Edition\n"
          fi
          # Remove trailing newline
          failed_tests=$(echo -e "$failed_tests" | sed 's/\\n$//')
          
          # Get PR information
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            pr_link="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
            pr_title="${{ github.event.pull_request.title }}"
            pr_author="${{ github.event.pull_request.user.login }}"
            context="**PR:** [$pr_title]($pr_link) by @$pr_author"
          else
            pr_link="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            context="**Manual run:** [View workflow run]($pr_link)"
          fi
          
          # Create Discord embed
          cat << EOF > discord_payload.json
          {
            "embeds": [
              {
                "title": "üö® E2E Tests Failed",
                "description": "$context",
                "color": 15158332,
                "fields": [
                  {
                    "name": "Failed Tests",
                    "value": "$failed_tests",
                    "inline": false
                  },
                  {
                    "name": "Artifacts",
                    "value": "[Download test reports and results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                    "inline": false
                  }
                ],
                "footer": {
                  "text": "ActivePieces E2E Tests"
                },
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
              }
            ]
          }
          EOF
          
          # Send it to Discord
          curl -H "Content-Type: application/json" \
               -d @discord_payload.json \
               "$DISCORD_WEBHOOK_URL"
      
      - name: Re-upload consolidated artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-artifacts-all
          path: ./artifacts/
          retention-days: 30

      - name: Build comment body
        if: always() && github.event_name == 'pull_request_target'
        id: build-comment
        run: |
          # Determine test results
          CLOUD_RESULT="${{ needs.test-e2e-cloud.result }}"
          EE_RESULT="${{ needs.test-e2e-ee.result }}"
          CE_RESULT="${{ needs.test-e2e-ce.result }}"
          
          # Start building the comment
          COMMENT_BODY="<!-- GENERATED-E2E-RESULTS -->"$'\n'"## üß™ E2E Test Results"$'\n\n'
          
          # Check for failed tests
          FAILED=""
          if [[ "$CLOUD_RESULT" == "failure" ]]; then
            FAILED+="- **CLOUD Edition**"$'\n'
          fi
          if [[ "$EE_RESULT" == "failure" ]]; then
            FAILED+="- **EE Edition**"$'\n'
          fi
          if [[ "$CE_RESULT" == "failure" ]]; then
            FAILED+="- **CE Edition**"$'\n'
          fi
          
          if [[ -n "$FAILED" ]]; then
            COMMENT_BODY+="### ‚ùå Failed Tests"$'\n'"$FAILED"$'\n'
          fi
          
          # Check for passed tests
          PASSED=""
          if [[ "$CLOUD_RESULT" == "success" ]]; then
            PASSED+="- **CLOUD Edition**"$'\n'
          fi
          if [[ "$EE_RESULT" == "success" ]]; then
            PASSED+="- **EE Edition**"$'\n'
          fi
          if [[ "$CE_RESULT" == "success" ]]; then
            PASSED+="- **CE Edition**"$'\n'
          fi
          
          if [[ -n "$PASSED" ]]; then
            COMMENT_BODY+="### ‚úÖ Passed Tests"$'\n'"$PASSED"$'\n'
          fi
          
          # Check for skipped tests
          SKIPPED=""
          if [[ "$CLOUD_RESULT" == "skipped" ]]; then
            SKIPPED+="- **CLOUD Edition**"$'\n'
          fi
          if [[ "$EE_RESULT" == "skipped" ]]; then
            SKIPPED+="- **EE Edition**"$'\n'
          fi
          if [[ "$CE_RESULT" == "skipped" ]]; then
            SKIPPED+="- **CE Edition**"$'\n'
          fi
          
          if [[ -n "$SKIPPED" ]]; then
            COMMENT_BODY+="### ‚è≠Ô∏è Skipped Tests"$'\n'"$SKIPPED"$'\n'
          fi
          
          # Add artifacts section
          COMMENT_BODY+="### üìä Test Artifacts"$'\n\n'
          COMMENT_BODY+="[**üì• Download All Test Reports & Results**](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"$'\n\n'
          COMMENT_BODY+="**Individual Reports:**"$'\n'
          
          if [[ "$CLOUD_RESULT" != "skipped" ]]; then
            COMMENT_BODY+="- [Cloud Edition Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (playwright-report-cloud)"$'\n'
          fi
          if [[ "$EE_RESULT" != "skipped" ]]; then
            COMMENT_BODY+="- [Enterprise Edition Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (playwright-report-ee)"$'\n'
          fi
          if [[ "$CE_RESULT" != "skipped" ]]; then
            COMMENT_BODY+="- [Community Edition Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (playwright-report-ce)"$'\n'
          fi
          
          COMMENT_BODY+=$'\n'"---"$'\n'
          COMMENT_BODY+="<sub>ü§ñ Automated E2E test results from [workflow run ${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>"
          
          # Save to output (escaping for multiline)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Find Comment
        if: always() && github.event_name == 'pull_request_target'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: <!-- GENERATED-E2E-RESULTS -->

      - name: Create comment
        if: always() && github.event_name == 'pull_request_target' && steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.build-comment.outputs.body }}

      - name: Update comment
        if: always() && github.event_name == 'pull_request_target' && steps.fc.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.build-comment.outputs.body }}